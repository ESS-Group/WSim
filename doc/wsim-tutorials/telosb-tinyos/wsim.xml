<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "/usr/share/sgml/docbook/dtd/4.5/docbookx.dtd">

<book lang="en">
	<bookinfo>
		<title>WSim Hardware Platform Simulator</title>
		<copyright><year>2005</year><holder>Worldsens</holder></copyright>
		<subtitle>Tutorial</subtitle>
		<authorgroup>
			<author>
				<firstname>Antoine</firstname>
				<surname>Fraboulet</surname>
			<affiliation>
			  <orgname>INRIA Rhône Alpes</orgname>
			  <orgdiv>Amazones Project</orgdiv>
			  <address>
			    CITI Laboratory
			    Domaine Scientifique de la Doua, INSA de Lyon
			    Bâtiment Claude Chappe 
			    6, avenue des Arts	
			    69621 Villeurbanne Cedex
			    France
			  </address>
			</affiliation>
			</author>
		</authorgroup>
		<revhistory>
			<revision>
				<revnumber>1.0</revnumber><date>2009-09-07</date>
				<revremark>First Draft</revremark>
			</revision>
		</revhistory>
		<abstract>
			<para>WSim tutorial for TinyOS simulation.</para>
		</abstract>
	</bookinfo>

<!-- ============================================================ -->
<!-- ============================================================ -->
<!-- ============================================================ -->

	<chapter id="introduction">
	  <title>Introduction</title>
	  
	  <para>This tutorial is intended to get you started
	    with WSim and TinyOS development. It shows
	    you the basics of  executing, debugging and
	    interpreting results of applications written for
	    the target microcontrollers.
	  </para>
	  
	  <para>The tutorial uses the telosb model but any WSim platform
	    will run the same with regards to TinyOS.
	  </para>

	  <para>This tutorial assumes that you are familiar with the basics
	    of WSim and its associated tools. If not please first visit the
	    WSim main tutorial.
	  </para>
	  
	  <para>
	    <itemizedlist mark="bullet" spacing="normal">
	      <listitem>
		<simpara>
		  WSim <ulink url="http://wsim.gforge.inria.fr/">WSim website</ulink>.
		</simpara>
	      </listitem>
	      <listitem>
		<simpara>
		  WSim hands-on tutorial <ulink url="http://wsim.gforge.inria.fr/tutorials/wsim/">WSim tutorial</ulink>.
		</simpara>
	      </listitem>
	    </itemizedlist>
	  </para>
	</chapter>
	
	<!-- ============================================================ -->
	<!-- ============================================================ -->
	<!-- ============================================================ -->


<chapter id="run">
  <title>WSim and Tossim</title>
  <para>
    WSim is a full platform simulator/emulator. The purpose of WSim is
    to have a precise hardware model on which we can run the full
    binary that could be used otherwise to flash the target. This
    precision level allows WSim to gather precise performance data on
    the code it runs including mechanisms like software frequency
    scaling, peripheral and interrupt latencies, precise power
    consumption, etc. The result of the simulation is precise with regards
    to the target device assembly instructions so that a precise observation
    of the embedded software can be build from the simulation.
  </para>
  <para>
    TOSSIM relies on . This means that the application TinyOS code is
    compiled for the machine TOSSIM runs on. Target specific modules
    like hardware drivers in the TinyOS component hierarchy are
    replaced at compile time by native modules that will simulate
    peripherals at the TinyOS API level. This simulation level implies
    that the real target binary is not generated. TOSSIM is thus
    limited to functional simulation and has a very limited feedback
    for performance and precise timings within the simulation. However,
    since the simulation is simpler than using WSim it is also faster.
  </para>
  <para>
    From the programmers' point of view, especially while debuging
    applications, WSim and TOSSIM are quite different in what we can
    observe at the TinyOS component level interface. TOSSIM simulates
    components behavior and gives back information at the TinyOS
    programming. WSim, in contrast, uses assembly instruction and
    provides feedback at C source level
    (the <computeroutput>app.c</computeroutput> file generated
    by <computeroutput>nesc</computeroutput>). Although TinyOS includes 
    compiler helpers to go back from the <computeroutput>app.c</computeroutput>
    to TinyOS components we do not use this feature in this tutorial
    and we will present how to debug TinyOS application starting from
    <computeroutput>app.c</computeroutput> file.
  </para>

</chapter>

	<!-- ============================================================ -->
	<!-- ============================================================ -->
	<!-- ============================================================ -->

</book>



